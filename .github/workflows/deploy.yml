name: 自动部署到云服务器

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: 运行测试 (可选)
      run: |
        # 如果有测试文件，可以运行测试
        # python -m pytest tests/
        echo "测试步骤 - 暂时跳过"
        
    - name: 部署到云服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "开始Docker部署到云服务器..."
          
          # 切换到项目目录
          cd /www/wwwroot/etermaiweb || { echo "项目目录不存在"; exit 1; }
          
          # 拉取最新代码
          git fetch origin
          git reset --hard origin/main
          
          # 智能部署策略：检查是否需要重新构建
          NEED_REBUILD=false
          
          # 检查关键Docker文件是否有变化
          if git diff HEAD~1 HEAD --name-only | grep -E "(Dockerfile|requirements\.txt|docker-compose\.yml)" > /dev/null; then
            echo "🔨 检测到Docker配置文件变化，需要重新构建"
            NEED_REBUILD=true
          fi
          
          # 检查容器是否正在运行
          if ! docker-compose ps | grep -q "Up"; then
            echo "🔨 检测到容器未运行，需要启动"
            NEED_REBUILD=true
          fi
          
          if [ "$NEED_REBUILD" = true ]; then
            echo "🔨 执行完整构建部署..."
            
            # 停止现有容器
            docker-compose down || echo "没有运行的容器"
            
            # 备份Redis数据
            echo "备份Redis数据..."
            mkdir -p backup
            docker run --rm -v etermaiweb_redis_data:/data -v $(pwd)/backup:/backup alpine tar czf /backup/redis_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /data . || echo "Redis备份失败"
            
            # 清理Docker缓存
            docker system prune -f || echo "清理失败"
            
            # 构建并启动
            docker-compose up -d --build
            
          else
            echo "⚡ 执行快速代码更新..."
            
            # 优化策略：只重新构建应用容器，复用Redis
            echo "停止应用容器（保持Redis运行）..."
            docker-compose stop app
            
            # 使用缓存快速重新构建应用容器
            echo "快速重新构建应用容器（利用Docker缓存）..."
            docker-compose build app
            
            # 启动应用容器
            echo "启动更新后的应用容器..."
            docker-compose up -d app
            
            # 如果失败，尝试完整重启
            if [ $? -ne 0 ]; then
              echo "快速更新失败，执行完整重启..."
              docker-compose down
              docker-compose up -d --build
            fi
          fi
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 30
          
          # 检查容器状态
          if docker-compose ps | grep -q "Up"; then
            echo "✅ Docker容器启动成功"
          else
            echo "❌ Docker容器启动失败"
            docker-compose logs
            exit 1
          fi
          
          # 健康检查
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
              echo "✅ 应用健康检查通过"
              break
            else
              echo "⏳ 等待应用启动... (尝试 $attempt/$max_attempts)"
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ 应用健康检查失败"
            docker-compose logs app
            exit 1
          fi
          
          echo "🎉 Docker部署完成！"
          echo "容器状态:"
          docker-compose ps
          
    - name: 发送部署通知 (可选)
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 部署成功通知"
          # 这里可以添加钉钉、企业微信等通知
        else
          echo "❌ 部署失败通知" 
          # 这里可以添加失败通知
        fi 